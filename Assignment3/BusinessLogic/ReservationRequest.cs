
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace Assignment3.BusinessLogic
{

    #region RequestStatus Enumeration
    //The RequestStatus enumeration holds the integral constants that corresponding to the possible status of the rooms. All meeting rooms can either have the status of accepted request
    //Rejected request or pending request. This enumeration is in a whole part association relationship with the ReservationRequest class. In this case, the ReservationRequest is the whole
    //while this enum is the part which is why a field variable is present for this enumeration.
    public enum RequestStatus
    {
        Accepted,
        Rejected,
        Pending
    }
    #endregion

    /// <summary>
    /// The reservation request class allows us to create objects of type ReservationRequest. This class is essentially what makes the requests since it encapsulates all the variables needed to make a request
    /// This class is in an association relationship with the meeting room class which is why a list of meeting rooms is present in the field variables and a property is present for the same.
    /// </summary>
    public class ReservationRequest
    {
        private static int lastRequestID = 0; // created this to use in RequestID autogenerated property, used to store previous ID, initilized to 0 here since it goes up by 1.
        //These variable are class varibales, not instance variable.
        //This was made to be a static field variable because I this variable is independant of the objects since I want all objects to start with 0 as the value for this variable.
        //These variables are when there is a clear need for a specific data sharing among all instances of a class. These are commonly used as counters which is why I have used this concept here.
        //The following source helped me find out about the usage of this static variable concept: https://stackoverflow.com/questions/21155438/when-to-use-static-variables-methods-and-when-to-use-instance-variables-methods#:~:text=use%20static%20variables%20when%20%3A%20The,E.g.%20number%20of%20students.&text=Static%20variable%3A%20When%20you%20need,need%20to%20know%20the%20variable.
        private int _requestID;
        private string _requestedBy;
        private string _description;
        private DateTime _startDateTime;
        private DateTime _endDateTime;
        private int _participants;
        private RequestStatus _status;
        private List<MeetingRoom> _meetingRooms;


        #region Properties
        //RequestID property

        public int RequestID { 
            get { return _requestID; }
            set { _requestID = lastRequestID+1; } // the setter takes the lastRequest ID and adds 1 to it to comply with the requiremnet that it must be autogenerated in sequence starting at 1. So the first ID made, would be 1.
            //the init was not used here because this application requests use to generate this ID within the AddReservationRequest method present in another class, thus a setter is more sutiable.
        }

        //RequestedBy property
        public string RequestedBy
        {
            get { return _requestedBy; }
            set {
                if (string.IsNullOrEmpty(value)) //validation to ensure the name of the requester is entered.
                {
                    throw new Exception("The name of the requester must be present");
                }
                _requestedBy = value; }
        }

        //Description property
        public string Description
        {
            get { return _description; }
            set
            {
                if (string.IsNullOrEmpty(value))// validation to ensure that a description for the request is provided.
                {
                    throw new Exception("A description of the purpose for the request must be provided"); 

                }
                _description = value;
            }
        }

        //StartDateTime property
        public DateTime StartDateTime
        {
            get { return _startDateTime; }
            set
            {
                if (value < DateTime.Today) //validation to ensure the startdate and time are greater than today since it must be a future date and time. This resource was used to confirm this: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.today?view=net-8.0

                {
                    throw new Exception("The day must be a future date and Time");
                }
                _startDateTime = value;
            }
        }

        //EndDateTime property 
        public DateTime EndDateTime
        {
            get { return _endDateTime; }
            set
            {
                if (value.Date != _startDateTime.Date) // validation to ensure that the end date is the same as start date since we cannot have events that carry over to the next day.
                                                       // value.Date gets the date only of this datetime variable so only dates can be compared.
                {
                    throw new Exception("The end day must be the same as the start day");
                }
                if (value < _startDateTime) //validation to ensure that both date and time are greater than start date and time.
                {
                    throw new Exception("The end time must be greater than the start time");
                }
                _endDateTime = value;
            }
        }

        //Participant property
        public int Participants
        {
            get { return _participants; }
            set
            {
                if (value <= 0)//valiation to ensure that participants are greater than 0
                {
                    throw new Exception("The participant count must be greater than 0");
                }
                _participants = value;
            }
        }

        //RequestStatus property
        public RequestStatus Status
        {
            get { return _status; }
            set
            {
                _status = value;   // no validation needed for an enum since user input is not needed for status, the application indictas if the request is accepted, rejected or pending.
            }
        }


        //property for association with a MeetingRoom class
        public List<MeetingRoom> MeetingRooms
        {
            get { return _meetingRooms; }
            set { _meetingRooms = value; }
        }
        #endregion

        #region Constructor
        /// <summary>
        /// The constuctor helps initilize and create the objects of type reservationrequest. Also peforms validations for when objects are created since the paramters are defined using the properties with validations
        /// </summary>
        /// <param name="requestedBy">Variable indicating who is requesting the meeting room</param>
        /// <param name="description"> Varibale indicating what the pupose of the request is</param>
        /// <param name="startDateTime">Variable with the start date and time of when the meeeting room is needed</param>
        /// <param name="endDateTime"> Variable with the end date and time of meeting</param>
        /// <param name="participants">Variable holding the number of expected people who will be present in the meeting room during request.</param>
        public ReservationRequest(string requestedBy, string description, DateTime startDateTime, DateTime endDateTime, int participants) //need to see if we need it for bonus, call setter 
        {
            _meetingRooms = null;
            RequestedBy =requestedBy;
            Description=description;
            StartDateTime=startDateTime;
            EndDateTime=endDateTime;
            Participants=participants;
            Status = RequestStatus.Pending; //initilally set to pending as per assignment requirements.
           
        }

        #endregion


        ///// <summary>
        ///// This was an overide to string method created to be used in the ViewRequests but this was taken out because this can easily be done through data binding using the StringFormat in the xaml.
        ///// </summary>
        ///// <returns></returns>
        //public override string ToString()
        //{
        //    return $" Requested by {RequestedBy} for Meeting of {Description} \n " +
        //        $"Scheduled on {StartDateTime.Date.ToString()} from {StartDateTime.ToString()} to {EndDateTime.ToString()}.\n Status {Status}" ;
        //}
    }

}
